<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{5629203d-57fb-4223-8db4-dc965ae85829}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	(* Timers *)
	tCarbidReaction : TON;         (* Timer voor gasvorming proces *)
    tStepDelay      : TON;         (* Timer voor vertraging tussen stappen *)
    tBlink          : TON;         (* Timer voor knipperen ReadyToFire *)
    blinkState      : BOOL := FALSE;  (* Hulpvariabele voor knipperende status *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Wanneer de knop wordt ingedrukt, gaat de lamp aan of uit *)
IF GVL_Carbid.Button THEN
   GVL_Carbid.Lamp := TRUE;    (* Zet lamp aan *)
ELSE
   GVL_Carbid.Lamp := FALSE;   (* Zet lamp uit *)
END_IF

(* Proces start door de gebruiker *)
IF GVL_Carbid.StartProcess THEN
    CASE GVL_Carbid.ProcessStep OF
        0:  (* Voeg carbid toe *)
            GVL_Carbid.AddCarbid := TRUE;
            tStepDelay(IN := TRUE, PT := T#2S); (* Voeg 2 seconden vertraging toe *)
            IF tStepDelay.Q THEN
                GVL_Carbid.AddCarbid := FALSE;
                GVL_Carbid.ProcessStep := 1; (* Ga naar de volgende stap *)
                tStepDelay(IN := FALSE); (* Reset timer voor volgende stap *)
            END_IF;

        1:  (* Voeg water toe *)
            GVL_Carbid.AddWater := TRUE;
            tCarbidReaction(IN := TRUE, PT := T#10S); (* Simuleer reactie met timer van 10s *)
            IF tCarbidReaction.Q THEN
                GVL_Carbid.GasFormation := TRUE;
                GVL_Carbid.AddWater := FALSE; (* Stop water toevoegen *)
                GVL_Carbid.EnoughWater := TRUE;
                GVL_Carbid.ProcessStep := 2;
                tCarbidReaction(IN := FALSE); (* Reset timer *)
            END_IF;

        2:  (* Plaats bal in bus *)
            IF GVL_Carbid.EnoughWater THEN
                GVL_Carbid.PlaceBall := TRUE;
                tStepDelay(IN := TRUE, PT := T#2S); (* Voeg 2 seconden vertraging toe *)
                IF tStepDelay.Q THEN
                    GVL_Carbid.PlaceBall := FALSE;
                    GVL_Carbid.BallSealed := TRUE; (* Bal sluit luchtdicht af *)
                    GVL_Carbid.ProcessStep := 3;
                    tStepDelay(IN := FALSE);
                END_IF;
            END_IF;

        3:  (* Ready to Fire en vlam bijhouden *)
            IF GVL_Carbid.BallSealed THEN
                (* Ready to Fire knippert *)
                tBlink(IN := TRUE, PT := T#500MS);  (* 500 ms voor knipperen *)
                IF tBlink.Q THEN
                    blinkState := NOT blinkState;  (* Wissel de knipperende status *)
                    GVL_Carbid.ReadyToFire := blinkState;
                    tBlink(IN := FALSE);  (* Reset de timer *)
                END_IF;

                (* Vuren wanneer vlam aanwezig is *)
                IF GVL_Carbid.FlameOn THEN
                    GVL_Carbid.Fire := TRUE;
					GVL_Carbid.EnoughWater := FALSE;
					GVL_Carbid.BallSealed := FALSE;
                    GVL_Carbid.ReadyToFire := FALSE;  (* Stop knipperen zodra vuur wordt gedetecteerd *)
                    GVL_Carbid.ProcessStep := 4;  (* Ga naar volgende stap *)
                ELSE
                    GVL_Carbid.Fire := FALSE;  (* Puls eindigt onmiddellijk *)
                END_IF;
            END_IF;

        4:  (* Controleer de bus na het schot *)
            GVL_Carbid.CheckAfterShot := TRUE;
            tStepDelay(IN := TRUE, PT := T#2S); (* Voeg 2 seconden vertraging toe *)
            IF tStepDelay.Q THEN
                GVL_Carbid.CheckAfterShot := FALSE;
				GVL_Carbid.Fire := FALSE;
                GVL_Carbid.ProcessStep := 5;
                tStepDelay(IN := FALSE);
            END_IF;

        5:  (* Verwijder resten van het vorige schot *)
            GVL_Carbid.RemoveDebris := TRUE;
            tStepDelay(IN := TRUE, PT := T#2S); (* Voeg 2 seconden vertraging toe *)
            IF tStepDelay.Q THEN
                GVL_Carbid.RemoveDebris := FALSE;
				GVL_Carbid.GasFormation := FALSE;
                GVL_Carbid.ProcessStep := 6; (* Reset proces voor volgende cyclus *)
                tStepDelay(IN := FALSE);
            END_IF;			
			
        6:  (* Haal de bal op *)
            GVL_Carbid.RetrieveBall := TRUE;
            tStepDelay(IN := TRUE, PT := T#2S); (* Voeg 2 seconden vertraging toe *)
            IF tStepDelay.Q THEN
                GVL_Carbid.RetrieveBall := FALSE;
                GVL_Carbid.ProcessStep := 0;
                tStepDelay(IN := FALSE);
            END_IF;
    END_CASE;
END_IF;]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="10" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="85" Count="34" />
      <LineId Id="174" Count="12" />
      <LineId Id="202" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="187" Count="4" />
      <LineId Id="129" Count="6" />
      <LineId Id="200" Count="0" />
      <LineId Id="136" Count="2" />
      <LineId Id="161" Count="0" />
      <LineId Id="163" Count="7" />
      <LineId Id="139" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="140" Count="7" />
      <LineId Id="157" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>